{"ast":null,"code":"var _jsxFileName = \"/home/toto/poncho/CODE/os-page/src/pages/DocsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from '../components/Sidebar';\nimport Editor from '../components/Editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DocsPage() {\n  _s();\n  const [sections, setSections] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n\n  // ✅ Cargar desde localStorage al iniciar\n  useEffect(() => {\n    const saved = localStorage.getItem('docs_sections');\n    if (saved) {\n      setSections(JSON.parse(saved));\n    }\n  }, []);\n\n  // ✅ Guardar en localStorage cada vez que cambian\n  useEffect(() => {\n    localStorage.setItem('docs_sections', JSON.stringify(sections));\n  }, [sections]);\n  const handleAddSection = () => {\n    const title = prompt(\"Título de la nueva sección:\");\n    if (!title) return;\n    const newSection = {\n      id: Date.now(),\n      title,\n      content: ''\n    };\n    setSections([...sections, newSection]);\n    setSelectedId(newSection.id); // Auto-seleccionar\n  };\n  const handleSelect = id => setSelectedId(id);\n  const handleUpdateContent = newContent => {\n    setSections(sections.map(sec => sec.id === selectedId ? {\n      ...sec,\n      content: newContent\n    } : sec));\n  };\n  const selectedSection = sections.find(sec => sec.id === selectedId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      sections: sections,\n      onAdd: handleAddSection,\n      onSelect: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      section: selectedSection,\n      onUpdateContent: handleUpdateContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(DocsPage, \"FfEx6EBHB/I+eP2SwMTxUplzD3o=\");\n_c = DocsPage;\nexport default DocsPage;\nvar _c;\n$RefreshReg$(_c, \"DocsPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Editor","jsxDEV","_jsxDEV","DocsPage","_s","sections","setSections","selectedId","setSelectedId","saved","localStorage","getItem","JSON","parse","setItem","stringify","handleAddSection","title","prompt","newSection","id","Date","now","content","handleSelect","handleUpdateContent","newContent","map","sec","selectedSection","find","style","display","children","onAdd","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","section","onUpdateContent","_c","$RefreshReg$"],"sources":["/home/toto/poncho/CODE/os-page/src/pages/DocsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Sidebar from '../components/Sidebar';\nimport Editor from '../components/Editor';\n\nfunction DocsPage() {\n  const [sections, setSections] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n\n  // ✅ Cargar desde localStorage al iniciar\n  useEffect(() => {\n    const saved = localStorage.getItem('docs_sections');\n    if (saved) {\n      setSections(JSON.parse(saved));\n    }\n  }, []);\n\n  // ✅ Guardar en localStorage cada vez que cambian\n  useEffect(() => {\n    localStorage.setItem('docs_sections', JSON.stringify(sections));\n  }, [sections]);\n\n  const handleAddSection = () => {\n    const title = prompt(\"Título de la nueva sección:\");\n    if (!title) return;\n    const newSection = {\n      id: Date.now(),\n      title,\n      content: ''\n    };\n    setSections([...sections, newSection]);\n    setSelectedId(newSection.id); // Auto-seleccionar\n  };\n\n  const handleSelect = (id) => setSelectedId(id);\n\n  const handleUpdateContent = (newContent) => {\n    setSections(sections.map(sec =>\n      sec.id === selectedId ? { ...sec, content: newContent } : sec\n    ));\n  };\n\n  const selectedSection = sections.find(sec => sec.id === selectedId);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <Sidebar sections={sections} onAdd={handleAddSection} onSelect={handleSelect} />\n      <Editor section={selectedSection} onUpdateContent={handleUpdateContent} />\n    </div>\n  );\n}\n\nexport default DocsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACnD,IAAIF,KAAK,EAAE;MACTH,WAAW,CAACM,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACdY,YAAY,CAACI,OAAO,CAAC,eAAe,EAAEF,IAAI,CAACG,SAAS,CAACV,QAAQ,CAAC,CAAC;EACjE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,KAAK,GAAGC,MAAM,CAAC,6BAA6B,CAAC;IACnD,IAAI,CAACD,KAAK,EAAE;IACZ,MAAME,UAAU,GAAG;MACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdL,KAAK;MACLM,OAAO,EAAE;IACX,CAAC;IACDjB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEc,UAAU,CAAC,CAAC;IACtCX,aAAa,CAACW,UAAU,CAACC,EAAE,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMI,YAAY,GAAIJ,EAAE,IAAKZ,aAAa,CAACY,EAAE,CAAC;EAE9C,MAAMK,mBAAmB,GAAIC,UAAU,IAAK;IAC1CpB,WAAW,CAACD,QAAQ,CAACsB,GAAG,CAACC,GAAG,IAC1BA,GAAG,CAACR,EAAE,KAAKb,UAAU,GAAG;MAAE,GAAGqB,GAAG;MAAEL,OAAO,EAAEG;IAAW,CAAC,GAAGE,GAC5D,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,eAAe,GAAGxB,QAAQ,CAACyB,IAAI,CAACF,GAAG,IAAIA,GAAG,CAACR,EAAE,KAAKb,UAAU,CAAC;EAEnE,oBACEL,OAAA;IAAK6B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9B/B,OAAA,CAACH,OAAO;MAACM,QAAQ,EAAEA,QAAS;MAAC6B,KAAK,EAAElB,gBAAiB;MAACmB,QAAQ,EAAEX;IAAa;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChFrC,OAAA,CAACF,MAAM;MAACwC,OAAO,EAAEX,eAAgB;MAACY,eAAe,EAAEhB;IAAoB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV;AAACnC,EAAA,CA7CQD,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AA+CjB,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}